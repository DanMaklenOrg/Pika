game vampire_survivors ~> 'Vampire Survivors';

// Achievements
achievement 'Unlock all achievements' {
    objective 'Unlock all steam achievements' {
        require achievement_c; //.achieved == true;
    }
}
achievement 'Unlock all characters' {
    objective 'Unlock all characters' {
        require character; //.unlocked == true;
    }
}
achievement 'Max all power ups' {
    objective 'Max all power ups' {
        require power_up_10; //.rank == 10;
        require power_up_5; //.rank == 5;
        require power_up_3; //.rank == 3;
        require power_up_2; //.rank == 2;
        require power_up_1; //.rank == 1;
    }
}
achievement 'Unlock all collection entries' {
    objective 'Unlock all collection entries' {
        require collection_entry; //.unlocked == true;
    }
}
achievement 'Unlock all secrets' {
    objective 'Unlock all secrets' {
        require secret; //.unlocked == true;
    }
}
achievement 'Unlock all stages and their hyper mode' {
    objective 'Unlock all stages' {
        require stage; //.unlocked == true;
    }
    objective 'Unlock hyper mode on all stages' {
        require stage; //.hyper_mode_unlocked == true;
    }
}
achievement 'Complete all levels in all adventures' {
    objective 'Complete all levels in all adventures' {
        require adventure; //.level == max_level;
    }
}

// Classes
class achievement_c {
    stat<bool> achieved ~> 'Achievement Unlocked';
}
class character {
    stat<bool> unlocked ~> 'Unlocked';
}
class power_up_10 {
    stat<int(0, 10)> rank ~> 'Rank';
}
class power_up_5 {
    stat<int(0, 5)> rank ~> 'Rank';
}
class power_up_3 {
    stat<int(0, 3)> rank ~> 'Rank';
}
class power_up_2 {
    stat<int(0, 2)> rank ~> 'Rank';
}
class power_up_1 {
    stat<int(0, 1)> rank ~> 'Rank';
}
class collection_entry {
    stat<bool> unlocked ~> 'Unlocked';
}
class stage {
    stat<bool> unlocked ~> 'Unlocked';
    stat<bool> hyper_mode_unlocked ~> 'Hyper Mode Unlocked';
}
class secret {
    stat<bool> unlocked ~> 'Unlocked';
}
class adventure {
    attribute max_level = 10;
    stat<int(0, max_level)> level ~> 'Level';
}

// Entities
achievement_s achievement_crewmate ~> 'Crewmate';
achievement_s achievement_report ~> 'Report!';
achievement_s achievement_impostor ~> 'Impostor';
achievement_s achievement_sharp_tongue ~> 'Sharp Tongue';
achievement_s achievement_scientist ~> 'Scientist';
achievement_s achievement_engineer ~> 'Engineer';
achievement_s achievement_lucky_swipe ~> 'Lucky Swipe';
achievement_s achievement_science_rocks ~> 'Science Rocks';
achievement_s achievement_shapeshifter ~> 'Shapeshifter';
achievement_s achievement_just_vent ~> 'Just Vent';
achievement_s achievement_unjust_ejection ~> 'Unjust Ejection';
achievement_s achievement_lifesign_scan ~> 'Lifesign Scan';
achievement_s achievement_ghost ~> 'Ghost';
achievement_s achievement_guardian ~> 'Guardian';
achievement_s achievement_clear_debris ~> 'Clear Debris';
achievement_s achievement_clear_asteroids ~> 'Clear Asteroids';
achievement_s achievement_horse ~> 'Horse';
achievement_s achievement_megalo_impostor ~> 'Megalo Impostor';
achievement_s achievement_hyper_polus_replica ~> 'Hyper Polus Replica';
achievement_s achievement_polus_replica_map ~> 'Polus Replica Map';
achievement_s achievement_bill ~> 'Bill';
achievement_s achievement_long_gun ~> 'Long Gun';
achievement_s achievement_lance ~> 'Lance';
achievement_s achievement_short_gun ~> 'Short Gun';
achievement_s achievement_ariana ~> 'Ariana';
achievement_s achievement_spread_shot ~> 'Spread Shot';
achievement_s achievement_lucia ~> 'Lucia';
achievement_s achievement_culaser ~> 'C-U-Laser';
achievement_s achievement_hyper_hectic_highway ~> 'Hyper Hectic Highway';
achievement_s achievement_brad ~> 'Brad';
achievement_s achievement_firearm ~> 'Firearm';
achievement_s achievement_browny ~> 'Browny';
achievement_s achievement_sonic_bloom ~> 'Sonic Bloom';
achievement_s achievement_sheena ~> 'Sheena';
achievement_s achievement_blade_crossbow ~> 'Blade Crossbow';
achievement_s achievement_probotector ~> 'Probotector';
achievement_s achievement_bfc2000ad ~> 'BFC2000-AD';
achievement_s achievement_prism_lass ~> 'Prism Lass';
achievement_s achievement_time_warp ~> 'Time Warp';
achievement_s achievement_stanley ~> 'Stanley';
achievement_s achievement_homing_miss ~> 'Homing Miss';
achievement_s achievement_multistage_missiles ~> 'Multistage Missiles';
achievement_s achievement_newt ~> 'Newt';
achievement_s achievement_diver_mines ~> 'Diver Mines';
achievement_s achievement_simondo ~> 'Simondo';
achievement_s achievement_bahamut ~> 'Bahamut';
achievement_s achievement_metal_claw ~> 'Metal Claw';
achievement_s achievement_big_fuzzy_fist ~> 'Big Fuzzy Fist';
achievement_s achievement_hyper_neo_galuga ~> 'Hyper Neo Galuga';
achievement_s achievement_neo_galuga_map ~> 'Neo Galuga Map';
stage 'Mad Forest';
stage 'Laborratory';
stage 'Eudaimonia M.';
stage 'Inlaid Library';
stage 'Neo Galuga';
stage 'Dairy Plant';
stage 'Gallo Tower';
stage 'Cappella Magna';
stage 'Il Molise';
stage 'Moongolow';
stage 'Carlo Cart';
stage 'Green Acres';
stage 'The Bone Zone';
stage 'Boss Rash';
stage 'Whiteout';
stage 'Space 54';
stage 'Bat Country';
stage 'Astral Stair';
stage 'Tiny Bridge';
stage 'Mt.Moonspell';
stage 'Lake Foscari';
stage 'Abyss Foscari';
stage 'Polus Replica';
stage 'Hectic Highway';
stage 'Room 1665';
collection_entry 'Super Candybox II Turbo';
collection_entry 'Sole Solution';
adventure 'A Garlic Paradise' { attribute max_level = 14; }
adventure 'World of Light and Dark' { attribute max_level = 17; }
adventure 'Legacy of the Moonspell' { attribute max_level = 14; }
adventure 'Emergency Meeting' { attribute max_level = 19; }
adventure 'Operation Guns' { attribute max_level = 28; }
