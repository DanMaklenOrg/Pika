//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/omarnasr/Documents/Projects/Personal/Pika/PikaLang/PikaLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Pika.PikaLang {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PikaLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, MULTI_LINE_COMMENT=2, WHITESPACE=3, DOMAIN=4, PROJECT=5, 
		OBJECTIVE=6, REQUIRE=7, CLASS=8, STAT=9, BOOL=10, INT=11, STRING_LITERAL=12, 
		INTEGER_LITERAL=13, SEMICOLON=14, OPEN_BRACES=15, CLOSE_BRACES=16, OPEN_ANGULAR_BRACES=17, 
		CLOSE_ANGULAR_BRACES=18, OPEN_PARENTHESES=19, CLOSE_PARENTHESES=20, COMMA=21, 
		WITH_NAME=22, IDENTIFIER=23;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITESPACE", "DOMAIN", "PROJECT", 
		"OBJECTIVE", "REQUIRE", "CLASS", "STAT", "BOOL", "INT", "STRING_LITERAL", 
		"INTEGER_LITERAL", "SEMICOLON", "OPEN_BRACES", "CLOSE_BRACES", "OPEN_ANGULAR_BRACES", 
		"CLOSE_ANGULAR_BRACES", "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", 
		"WITH_NAME", "IDENTIFIER"
	};


	public PikaLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PikaLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'domain'", "'project'", "'objective'", "'require'", 
		"'class'", "'stat'", "'bool'", "'int'", null, null, "';'", "'{'", "'}'", 
		"'<'", "'>'", "'('", "')'", "','", "'~>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITESPACE", "DOMAIN", 
		"PROJECT", "OBJECTIVE", "REQUIRE", "CLASS", "STAT", "BOOL", "INT", "STRING_LITERAL", 
		"INTEGER_LITERAL", "SEMICOLON", "OPEN_BRACES", "CLOSE_BRACES", "OPEN_ANGULAR_BRACES", 
		"CLOSE_ANGULAR_BRACES", "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", 
		"WITH_NAME", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PikaLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PikaLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,174,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,0,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,1,1,
		1,1,1,1,1,1,5,1,63,8,1,10,1,12,1,66,9,1,1,1,1,1,1,1,1,1,1,1,1,2,4,2,74,
		8,2,11,2,12,2,75,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,137,8,11,10,11,
		12,11,140,9,11,1,11,1,11,1,12,4,12,145,8,12,11,12,12,12,146,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,5,22,170,8,22,10,22,12,22,173,9,22,1,64,0,23,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,6,1,0,10,10,
		2,0,9,10,32,32,2,0,10,10,39,39,1,0,48,57,2,0,48,57,97,122,3,0,48,57,95,
		95,97,122,180,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
		0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
		21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
		0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
		0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,58,1,0,0,0,5,73,1,0,0,0,7,79,
		1,0,0,0,9,86,1,0,0,0,11,94,1,0,0,0,13,104,1,0,0,0,15,112,1,0,0,0,17,118,
		1,0,0,0,19,123,1,0,0,0,21,128,1,0,0,0,23,132,1,0,0,0,25,144,1,0,0,0,27,
		148,1,0,0,0,29,150,1,0,0,0,31,152,1,0,0,0,33,154,1,0,0,0,35,156,1,0,0,
		0,37,158,1,0,0,0,39,160,1,0,0,0,41,162,1,0,0,0,43,164,1,0,0,0,45,167,1,
		0,0,0,47,48,5,47,0,0,48,49,5,47,0,0,49,53,1,0,0,0,50,52,8,0,0,0,51,50,
		1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,
		1,0,0,0,56,57,6,0,0,0,57,2,1,0,0,0,58,59,5,47,0,0,59,60,5,42,0,0,60,64,
		1,0,0,0,61,63,9,0,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,65,1,0,0,0,64,62,
		1,0,0,0,65,67,1,0,0,0,66,64,1,0,0,0,67,68,5,42,0,0,68,69,5,47,0,0,69,70,
		1,0,0,0,70,71,6,1,0,0,71,4,1,0,0,0,72,74,7,1,0,0,73,72,1,0,0,0,74,75,1,
		0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,78,6,2,0,0,78,6,1,0,
		0,0,79,80,5,100,0,0,80,81,5,111,0,0,81,82,5,109,0,0,82,83,5,97,0,0,83,
		84,5,105,0,0,84,85,5,110,0,0,85,8,1,0,0,0,86,87,5,112,0,0,87,88,5,114,
		0,0,88,89,5,111,0,0,89,90,5,106,0,0,90,91,5,101,0,0,91,92,5,99,0,0,92,
		93,5,116,0,0,93,10,1,0,0,0,94,95,5,111,0,0,95,96,5,98,0,0,96,97,5,106,
		0,0,97,98,5,101,0,0,98,99,5,99,0,0,99,100,5,116,0,0,100,101,5,105,0,0,
		101,102,5,118,0,0,102,103,5,101,0,0,103,12,1,0,0,0,104,105,5,114,0,0,105,
		106,5,101,0,0,106,107,5,113,0,0,107,108,5,117,0,0,108,109,5,105,0,0,109,
		110,5,114,0,0,110,111,5,101,0,0,111,14,1,0,0,0,112,113,5,99,0,0,113,114,
		5,108,0,0,114,115,5,97,0,0,115,116,5,115,0,0,116,117,5,115,0,0,117,16,
		1,0,0,0,118,119,5,115,0,0,119,120,5,116,0,0,120,121,5,97,0,0,121,122,5,
		116,0,0,122,18,1,0,0,0,123,124,5,98,0,0,124,125,5,111,0,0,125,126,5,111,
		0,0,126,127,5,108,0,0,127,20,1,0,0,0,128,129,5,105,0,0,129,130,5,110,0,
		0,130,131,5,116,0,0,131,22,1,0,0,0,132,138,5,39,0,0,133,137,8,2,0,0,134,
		135,5,92,0,0,135,137,5,39,0,0,136,133,1,0,0,0,136,134,1,0,0,0,137,140,
		1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,
		0,141,142,5,39,0,0,142,24,1,0,0,0,143,145,7,3,0,0,144,143,1,0,0,0,145,
		146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,26,1,0,0,0,148,149,5,59,
		0,0,149,28,1,0,0,0,150,151,5,123,0,0,151,30,1,0,0,0,152,153,5,125,0,0,
		153,32,1,0,0,0,154,155,5,60,0,0,155,34,1,0,0,0,156,157,5,62,0,0,157,36,
		1,0,0,0,158,159,5,40,0,0,159,38,1,0,0,0,160,161,5,41,0,0,161,40,1,0,0,
		0,162,163,5,44,0,0,163,42,1,0,0,0,164,165,5,126,0,0,165,166,5,62,0,0,166,
		44,1,0,0,0,167,171,7,4,0,0,168,170,7,5,0,0,169,168,1,0,0,0,170,173,1,0,
		0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,46,1,0,0,0,173,171,1,0,0,0,8,0,
		53,64,75,136,138,146,171,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pika.PikaLang
