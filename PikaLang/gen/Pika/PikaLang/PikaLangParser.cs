//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/omarnasr/Documents/Projects/Personal/Pika/PikaLang/PikaLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Pika.PikaLang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PikaLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, MULTI_LINE_COMMENT=2, WHITESPACE=3, GAME=4, ACHIEVEMENT=5, 
		OBJECTIVE=6, CRITERION=7, CATEGORY=8, DESCRIPTION=9, SEMICOLON=10, OPEN_BRACES=11, 
		CLOSE_BRACES=12, OPEN_ANGULAR_BRACES=13, CLOSE_ANGULAR_BRACES=14, OPEN_PARENTHESES=15, 
		CLOSE_PARENTHESES=16, COMMA=17, WITH_NAME=18, EQUALS=19, STRING_LITERAL=20, 
		INTEGER_LITERAL=21, IDENTIFIER=22;
	public const int
		RULE_root = 0, RULE_gameDecl = 1, RULE_declStmt = 2, RULE_achievementDecl = 3, 
		RULE_objectiveDecl = 4, RULE_criterionDecl = 5, RULE_describtionDecl = 6, 
		RULE_categoryDecl = 7, RULE_entityDecl = 8, RULE_namedIdentifier = 9;
	public static readonly string[] ruleNames = {
		"root", "gameDecl", "declStmt", "achievementDecl", "objectiveDecl", "criterionDecl", 
		"describtionDecl", "categoryDecl", "entityDecl", "namedIdentifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'game'", "'achievement'", "'objective'", "'criterion'", 
		"'category'", "'description'", "';'", "'{'", "'}'", "'<'", "'>'", "'('", 
		"')'", "','", "'~>'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITESPACE", "GAME", 
		"ACHIEVEMENT", "OBJECTIVE", "CRITERION", "CATEGORY", "DESCRIPTION", "SEMICOLON", 
		"OPEN_BRACES", "CLOSE_BRACES", "OPEN_ANGULAR_BRACES", "CLOSE_ANGULAR_BRACES", 
		"OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", "WITH_NAME", "EQUALS", 
		"STRING_LITERAL", "INTEGER_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PikaLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PikaLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PikaLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PikaLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameDeclContext gameDecl() {
			return GetRuleContext<GameDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PikaLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclStmtContext[] declStmt() {
			return GetRuleContexts<DeclStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclStmtContext declStmt(int i) {
			return GetRuleContext<DeclStmtContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			gameDecl();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4194592L) != 0)) {
				{
				{
				State = 21;
				declStmt();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GAME() { return GetToken(PikaLangParser.GAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public GameDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameDeclContext gameDecl() {
		GameDeclContext _localctx = new GameDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_gameDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(GAME);
			State = 30;
			namedIdentifier();
			State = 31;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclStmtContext : ParserRuleContext {
		public DeclStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declStmt; } }
	 
		public DeclStmtContext() { }
		public virtual void CopyFrom(DeclStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EntityDeclarationContext : DeclStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDeclContext entityDecl() {
			return GetRuleContext<EntityDeclContext>(0);
		}
		public EntityDeclarationContext(DeclStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CategoryDeclarationContext : DeclStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public CategoryDeclContext categoryDecl() {
			return GetRuleContext<CategoryDeclContext>(0);
		}
		public CategoryDeclarationContext(DeclStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategoryDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AchievementDeclarationContext : DeclStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public AchievementDeclContext achievementDecl() {
			return GetRuleContext<AchievementDeclContext>(0);
		}
		public AchievementDeclarationContext(DeclStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAchievementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclStmtContext declStmt() {
		DeclStmtContext _localctx = new DeclStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_declStmt);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACHIEVEMENT:
				_localctx = new AchievementDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 33;
				achievementDecl();
				}
				break;
			case CATEGORY:
				_localctx = new CategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 34;
				categoryDecl();
				}
				break;
			case IDENTIFIER:
				_localctx = new EntityDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 35;
				entityDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AchievementDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACHIEVEMENT() { return GetToken(PikaLangParser.ACHIEVEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACES() { return GetToken(PikaLangParser.OPEN_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACES() { return GetToken(PikaLangParser.CLOSE_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescribtionDeclContext describtionDecl() {
			return GetRuleContext<DescribtionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectiveDeclContext[] objectiveDecl() {
			return GetRuleContexts<ObjectiveDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectiveDeclContext objectiveDecl(int i) {
			return GetRuleContext<ObjectiveDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CriterionDeclContext criterionDecl() {
			return GetRuleContext<CriterionDeclContext>(0);
		}
		public AchievementDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_achievementDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAchievementDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AchievementDeclContext achievementDecl() {
		AchievementDeclContext _localctx = new AchievementDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_achievementDecl);
		int _la;
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				Match(ACHIEVEMENT);
				State = 39;
				namedIdentifier();
				State = 40;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				Match(ACHIEVEMENT);
				State = 43;
				namedIdentifier();
				State = 44;
				Match(OPEN_BRACES);
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESCRIPTION) {
					{
					State = 45;
					describtionDecl();
					}
				}

				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OBJECTIVE) {
					{
					{
					State = 48;
					objectiveDecl();
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CRITERION) {
					{
					State = 54;
					criterionDecl();
					}
				}

				State = 57;
				Match(CLOSE_BRACES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectiveDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECTIVE() { return GetToken(PikaLangParser.OBJECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACES() { return GetToken(PikaLangParser.OPEN_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACES() { return GetToken(PikaLangParser.CLOSE_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescribtionDeclContext describtionDecl() {
			return GetRuleContext<DescribtionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CriterionDeclContext criterionDecl() {
			return GetRuleContext<CriterionDeclContext>(0);
		}
		public ObjectiveDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectiveDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectiveDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectiveDeclContext objectiveDecl() {
		ObjectiveDeclContext _localctx = new ObjectiveDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_objectiveDecl);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				Match(OBJECTIVE);
				State = 62;
				namedIdentifier();
				State = 63;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(OBJECTIVE);
				State = 66;
				namedIdentifier();
				State = 67;
				Match(OPEN_BRACES);
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESCRIPTION) {
					{
					State = 68;
					describtionDecl();
					}
				}

				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CRITERION) {
					{
					State = 71;
					criterionDecl();
					}
				}

				State = 74;
				Match(CLOSE_BRACES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRITERION() { return GetToken(PikaLangParser.CRITERION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public CriterionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterionDeclContext criterionDecl() {
		CriterionDeclContext _localctx = new CriterionDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_criterionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(CRITERION);
			State = 79;
			Match(IDENTIFIER);
			State = 80;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribtionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(PikaLangParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PikaLangParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public DescribtionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describtionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribtionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribtionDeclContext describtionDecl() {
		DescribtionDeclContext _localctx = new DescribtionDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_describtionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(DESCRIPTION);
			State = 83;
			Match(STRING_LITERAL);
			State = 84;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CategoryDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATEGORY() { return GetToken(PikaLangParser.CATEGORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public CategoryDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_categoryDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategoryDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CategoryDeclContext categoryDecl() {
		CategoryDeclContext _localctx = new CategoryDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_categoryDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(CATEGORY);
			State = 87;
			namedIdentifier();
			State = 88;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public EntityDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclContext entityDecl() {
		EntityDeclContext _localctx = new EntityDeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_entityDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(IDENTIFIER);
			State = 91;
			namedIdentifier();
			State = 92;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedIdentifierContext : ParserRuleContext {
		public NamedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedIdentifier; } }
	 
		public NamedIdentifierContext() { }
		public virtual void CopyFrom(NamedIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdWithNameContext : NamedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_NAME() { return GetToken(PikaLangParser.WITH_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PikaLangParser.STRING_LITERAL, 0); }
		public IdWithNameContext(NamedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdWithName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdOnlyContext : NamedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		public IdOnlyContext(NamedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdOnly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameOnlyContext : NamedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PikaLangParser.STRING_LITERAL, 0); }
		public NameOnlyContext(NamedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameOnly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedIdentifierContext namedIdentifier() {
		NamedIdentifierContext _localctx = new NamedIdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_namedIdentifier);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new IdWithNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(IDENTIFIER);
				State = 95;
				Match(WITH_NAME);
				State = 96;
				Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new NameOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new IdOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,102,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,5,0,23,8,0,10,0,12,0,26,9,0,1,0,1,0,1,1,1,
		1,1,1,1,1,1,2,1,2,1,2,3,2,37,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,47,
		8,3,1,3,5,3,50,8,3,10,3,12,3,53,9,3,1,3,3,3,56,8,3,1,3,1,3,3,3,60,8,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,70,8,4,1,4,3,4,73,8,4,1,4,1,4,3,4,
		77,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,9,1,9,1,9,1,9,1,9,3,9,100,8,9,1,9,0,0,10,0,2,4,6,8,10,12,14,16,18,0,
		0,103,0,20,1,0,0,0,2,29,1,0,0,0,4,36,1,0,0,0,6,59,1,0,0,0,8,76,1,0,0,0,
		10,78,1,0,0,0,12,82,1,0,0,0,14,86,1,0,0,0,16,90,1,0,0,0,18,99,1,0,0,0,
		20,24,3,2,1,0,21,23,3,4,2,0,22,21,1,0,0,0,23,26,1,0,0,0,24,22,1,0,0,0,
		24,25,1,0,0,0,25,27,1,0,0,0,26,24,1,0,0,0,27,28,5,0,0,1,28,1,1,0,0,0,29,
		30,5,4,0,0,30,31,3,18,9,0,31,32,5,10,0,0,32,3,1,0,0,0,33,37,3,6,3,0,34,
		37,3,14,7,0,35,37,3,16,8,0,36,33,1,0,0,0,36,34,1,0,0,0,36,35,1,0,0,0,37,
		5,1,0,0,0,38,39,5,5,0,0,39,40,3,18,9,0,40,41,5,10,0,0,41,60,1,0,0,0,42,
		43,5,5,0,0,43,44,3,18,9,0,44,46,5,11,0,0,45,47,3,12,6,0,46,45,1,0,0,0,
		46,47,1,0,0,0,47,51,1,0,0,0,48,50,3,8,4,0,49,48,1,0,0,0,50,53,1,0,0,0,
		51,49,1,0,0,0,51,52,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,0,54,56,3,10,5,0,
		55,54,1,0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,57,58,5,12,0,0,58,60,1,0,0,0,
		59,38,1,0,0,0,59,42,1,0,0,0,60,7,1,0,0,0,61,62,5,6,0,0,62,63,3,18,9,0,
		63,64,5,10,0,0,64,77,1,0,0,0,65,66,5,6,0,0,66,67,3,18,9,0,67,69,5,11,0,
		0,68,70,3,12,6,0,69,68,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,73,3,10,
		5,0,72,71,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,75,5,12,0,0,75,77,1,0,
		0,0,76,61,1,0,0,0,76,65,1,0,0,0,77,9,1,0,0,0,78,79,5,7,0,0,79,80,5,22,
		0,0,80,81,5,10,0,0,81,11,1,0,0,0,82,83,5,9,0,0,83,84,5,20,0,0,84,85,5,
		10,0,0,85,13,1,0,0,0,86,87,5,8,0,0,87,88,3,18,9,0,88,89,5,10,0,0,89,15,
		1,0,0,0,90,91,5,22,0,0,91,92,3,18,9,0,92,93,5,10,0,0,93,17,1,0,0,0,94,
		95,5,22,0,0,95,96,5,18,0,0,96,100,5,20,0,0,97,100,5,20,0,0,98,100,5,22,
		0,0,99,94,1,0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,19,1,0,0,0,10,24,36,
		46,51,55,59,69,72,76,99
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pika.PikaLang
