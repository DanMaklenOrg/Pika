//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/omarnasr/Documents/Projects/Personal/Pika/PikaLang/PikaLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Pika.PikaLang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PikaLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, MULTI_LINE_COMMENT=2, WHITESPACE=3, GAME=4, ACHIEVEMENT=5, 
		OBJECTIVE=6, CRITERION=7, CATEGORY=8, DESCRIPTION=9, IMPORT=10, STEAM=11, 
		SEMICOLON=12, OPEN_BRACES=13, CLOSE_BRACES=14, OPEN_ANGULAR_BRACES=15, 
		CLOSE_ANGULAR_BRACES=16, OPEN_PARENTHESES=17, CLOSE_PARENTHESES=18, COMMA=19, 
		WITH_NAME=20, EQUALS=21, STRING_LITERAL=22, INTEGER_LITERAL=23, IDENTIFIER=24;
	public const int
		RULE_root = 0, RULE_gameDecl = 1, RULE_declStmt = 2, RULE_importStmt = 3, 
		RULE_achievementDecl = 4, RULE_objectiveDecl = 5, RULE_criterionDecl = 6, 
		RULE_describtionDecl = 7, RULE_categoryDecl = 8, RULE_entityDecl = 9, 
		RULE_namedIdentifier = 10;
	public static readonly string[] ruleNames = {
		"root", "gameDecl", "declStmt", "importStmt", "achievementDecl", "objectiveDecl", 
		"criterionDecl", "describtionDecl", "categoryDecl", "entityDecl", "namedIdentifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'game'", "'achievement'", "'objective'", "'criterion'", 
		"'category'", "'description'", "'import'", "'steam'", "';'", "'{'", "'}'", 
		"'<'", "'>'", "'('", "')'", "','", "'~>'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITESPACE", "GAME", 
		"ACHIEVEMENT", "OBJECTIVE", "CRITERION", "CATEGORY", "DESCRIPTION", "IMPORT", 
		"STEAM", "SEMICOLON", "OPEN_BRACES", "CLOSE_BRACES", "OPEN_ANGULAR_BRACES", 
		"CLOSE_ANGULAR_BRACES", "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "COMMA", 
		"WITH_NAME", "EQUALS", "STRING_LITERAL", "INTEGER_LITERAL", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PikaLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PikaLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PikaLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PikaLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameDeclContext gameDecl() {
			return GetRuleContext<GameDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PikaLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext[] importStmt() {
			return GetRuleContexts<ImportStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext importStmt(int i) {
			return GetRuleContext<ImportStmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclStmtContext[] declStmt() {
			return GetRuleContexts<DeclStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclStmtContext declStmt(int i) {
			return GetRuleContext<DeclStmtContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			gameDecl();
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 23;
				importStmt();
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16777504L) != 0)) {
				{
				{
				State = 29;
				declStmt();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GAME() { return GetToken(PikaLangParser.GAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public GameDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameDeclContext gameDecl() {
		GameDeclContext _localctx = new GameDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_gameDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(GAME);
			State = 38;
			namedIdentifier();
			State = 39;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclStmtContext : ParserRuleContext {
		public DeclStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declStmt; } }
	 
		public DeclStmtContext() { }
		public virtual void CopyFrom(DeclStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EntityDeclarationContext : DeclStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDeclContext entityDecl() {
			return GetRuleContext<EntityDeclContext>(0);
		}
		public EntityDeclarationContext(DeclStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CategoryDeclarationContext : DeclStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public CategoryDeclContext categoryDecl() {
			return GetRuleContext<CategoryDeclContext>(0);
		}
		public CategoryDeclarationContext(DeclStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategoryDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AchievementDeclarationContext : DeclStmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public AchievementDeclContext achievementDecl() {
			return GetRuleContext<AchievementDeclContext>(0);
		}
		public AchievementDeclarationContext(DeclStmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAchievementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclStmtContext declStmt() {
		DeclStmtContext _localctx = new DeclStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_declStmt);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACHIEVEMENT:
				_localctx = new AchievementDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				achievementDecl();
				}
				break;
			case CATEGORY:
				_localctx = new CategoryDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				categoryDecl();
				}
				break;
			case IDENTIFIER:
				_localctx = new EntityDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 43;
				entityDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(PikaLangParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEAM() { return GetToken(PikaLangParser.STEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESES() { return GetToken(PikaLangParser.OPEN_PARENTHESES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(PikaLangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESES() { return GetToken(PikaLangParser.CLOSE_PARENTHESES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public ImportStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStmtContext importStmt() {
		ImportStmtContext _localctx = new ImportStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(IMPORT);
			State = 47;
			Match(STEAM);
			State = 48;
			Match(OPEN_PARENTHESES);
			State = 49;
			Match(INTEGER_LITERAL);
			State = 50;
			Match(CLOSE_PARENTHESES);
			State = 51;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AchievementDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACHIEVEMENT() { return GetToken(PikaLangParser.ACHIEVEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACES() { return GetToken(PikaLangParser.OPEN_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACES() { return GetToken(PikaLangParser.CLOSE_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescribtionDeclContext describtionDecl() {
			return GetRuleContext<DescribtionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectiveDeclContext[] objectiveDecl() {
			return GetRuleContexts<ObjectiveDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectiveDeclContext objectiveDecl(int i) {
			return GetRuleContext<ObjectiveDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CriterionDeclContext criterionDecl() {
			return GetRuleContext<CriterionDeclContext>(0);
		}
		public AchievementDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_achievementDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAchievementDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AchievementDeclContext achievementDecl() {
		AchievementDeclContext _localctx = new AchievementDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_achievementDecl);
		int _la;
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				Match(ACHIEVEMENT);
				State = 54;
				namedIdentifier();
				State = 55;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				Match(ACHIEVEMENT);
				State = 58;
				namedIdentifier();
				State = 59;
				Match(OPEN_BRACES);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESCRIPTION) {
					{
					State = 60;
					describtionDecl();
					}
				}

				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OBJECTIVE) {
					{
					{
					State = 63;
					objectiveDecl();
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CRITERION) {
					{
					State = 69;
					criterionDecl();
					}
				}

				State = 72;
				Match(CLOSE_BRACES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectiveDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECTIVE() { return GetToken(PikaLangParser.OBJECTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACES() { return GetToken(PikaLangParser.OPEN_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACES() { return GetToken(PikaLangParser.CLOSE_BRACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescribtionDeclContext describtionDecl() {
			return GetRuleContext<DescribtionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CriterionDeclContext criterionDecl() {
			return GetRuleContext<CriterionDeclContext>(0);
		}
		public ObjectiveDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectiveDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectiveDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectiveDeclContext objectiveDecl() {
		ObjectiveDeclContext _localctx = new ObjectiveDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_objectiveDecl);
		int _la;
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				Match(OBJECTIVE);
				State = 77;
				namedIdentifier();
				State = 78;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				Match(OBJECTIVE);
				State = 81;
				namedIdentifier();
				State = 82;
				Match(OPEN_BRACES);
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESCRIPTION) {
					{
					State = 83;
					describtionDecl();
					}
				}

				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CRITERION) {
					{
					State = 86;
					criterionDecl();
					}
				}

				State = 89;
				Match(CLOSE_BRACES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CriterionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRITERION() { return GetToken(PikaLangParser.CRITERION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public CriterionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_criterionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCriterionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CriterionDeclContext criterionDecl() {
		CriterionDeclContext _localctx = new CriterionDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_criterionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(CRITERION);
			State = 94;
			Match(IDENTIFIER);
			State = 95;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribtionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(PikaLangParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PikaLangParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public DescribtionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describtionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribtionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribtionDeclContext describtionDecl() {
		DescribtionDeclContext _localctx = new DescribtionDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_describtionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(DESCRIPTION);
			State = 98;
			Match(STRING_LITERAL);
			State = 99;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CategoryDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATEGORY() { return GetToken(PikaLangParser.CATEGORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public CategoryDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_categoryDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategoryDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CategoryDeclContext categoryDecl() {
		CategoryDeclContext _localctx = new CategoryDeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_categoryDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(CATEGORY);
			State = 102;
			namedIdentifier();
			State = 103;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedIdentifierContext namedIdentifier() {
			return GetRuleContext<NamedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(PikaLangParser.SEMICOLON, 0); }
		public EntityDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDeclContext entityDecl() {
		EntityDeclContext _localctx = new EntityDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_entityDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(IDENTIFIER);
			State = 106;
			namedIdentifier();
			State = 107;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedIdentifierContext : ParserRuleContext {
		public NamedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedIdentifier; } }
	 
		public NamedIdentifierContext() { }
		public virtual void CopyFrom(NamedIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdWithNameContext : NamedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_NAME() { return GetToken(PikaLangParser.WITH_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PikaLangParser.STRING_LITERAL, 0); }
		public IdWithNameContext(NamedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdWithName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdOnlyContext : NamedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PikaLangParser.IDENTIFIER, 0); }
		public IdOnlyContext(NamedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdOnly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameOnlyContext : NamedIdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(PikaLangParser.STRING_LITERAL, 0); }
		public NameOnlyContext(NamedIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPikaLangVisitor<TResult> typedVisitor = visitor as IPikaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameOnly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedIdentifierContext namedIdentifier() {
		NamedIdentifierContext _localctx = new NamedIdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_namedIdentifier);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new IdWithNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(IDENTIFIER);
				State = 110;
				Match(WITH_NAME);
				State = 111;
				Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new NameOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new IdOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,117,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,5,0,25,8,0,10,0,12,0,28,9,0,1,0,
		5,0,31,8,0,10,0,12,0,34,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,45,
		8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,62,
		8,4,1,4,5,4,65,8,4,10,4,12,4,68,9,4,1,4,3,4,71,8,4,1,4,1,4,3,4,75,8,4,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,85,8,5,1,5,3,5,88,8,5,1,5,1,5,3,5,
		92,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,3,10,115,8,10,1,10,0,0,11,0,2,4,6,8,10,12,14,
		16,18,20,0,0,118,0,22,1,0,0,0,2,37,1,0,0,0,4,44,1,0,0,0,6,46,1,0,0,0,8,
		74,1,0,0,0,10,91,1,0,0,0,12,93,1,0,0,0,14,97,1,0,0,0,16,101,1,0,0,0,18,
		105,1,0,0,0,20,114,1,0,0,0,22,26,3,2,1,0,23,25,3,6,3,0,24,23,1,0,0,0,25,
		28,1,0,0,0,26,24,1,0,0,0,26,27,1,0,0,0,27,32,1,0,0,0,28,26,1,0,0,0,29,
		31,3,4,2,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,
		35,1,0,0,0,34,32,1,0,0,0,35,36,5,0,0,1,36,1,1,0,0,0,37,38,5,4,0,0,38,39,
		3,20,10,0,39,40,5,12,0,0,40,3,1,0,0,0,41,45,3,8,4,0,42,45,3,16,8,0,43,
		45,3,18,9,0,44,41,1,0,0,0,44,42,1,0,0,0,44,43,1,0,0,0,45,5,1,0,0,0,46,
		47,5,10,0,0,47,48,5,11,0,0,48,49,5,17,0,0,49,50,5,23,0,0,50,51,5,18,0,
		0,51,52,5,12,0,0,52,7,1,0,0,0,53,54,5,5,0,0,54,55,3,20,10,0,55,56,5,12,
		0,0,56,75,1,0,0,0,57,58,5,5,0,0,58,59,3,20,10,0,59,61,5,13,0,0,60,62,3,
		14,7,0,61,60,1,0,0,0,61,62,1,0,0,0,62,66,1,0,0,0,63,65,3,10,5,0,64,63,
		1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,70,1,0,0,0,68,66,
		1,0,0,0,69,71,3,12,6,0,70,69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,
		5,14,0,0,73,75,1,0,0,0,74,53,1,0,0,0,74,57,1,0,0,0,75,9,1,0,0,0,76,77,
		5,6,0,0,77,78,3,20,10,0,78,79,5,12,0,0,79,92,1,0,0,0,80,81,5,6,0,0,81,
		82,3,20,10,0,82,84,5,13,0,0,83,85,3,14,7,0,84,83,1,0,0,0,84,85,1,0,0,0,
		85,87,1,0,0,0,86,88,3,12,6,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,
		89,90,5,14,0,0,90,92,1,0,0,0,91,76,1,0,0,0,91,80,1,0,0,0,92,11,1,0,0,0,
		93,94,5,7,0,0,94,95,5,24,0,0,95,96,5,12,0,0,96,13,1,0,0,0,97,98,5,9,0,
		0,98,99,5,22,0,0,99,100,5,12,0,0,100,15,1,0,0,0,101,102,5,8,0,0,102,103,
		3,20,10,0,103,104,5,12,0,0,104,17,1,0,0,0,105,106,5,24,0,0,106,107,3,20,
		10,0,107,108,5,12,0,0,108,19,1,0,0,0,109,110,5,24,0,0,110,111,5,20,0,0,
		111,115,5,22,0,0,112,115,5,22,0,0,113,115,5,24,0,0,114,109,1,0,0,0,114,
		112,1,0,0,0,114,113,1,0,0,0,115,21,1,0,0,0,11,26,32,44,61,66,70,74,84,
		87,91,114
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Pika.PikaLang
